-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Advios_LedControl is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    clk_second : IN STD_LOGIC;
    ctrl : IN STD_LOGIC_VECTOR (3 downto 0);
    switches : IN STD_LOGIC_VECTOR (3 downto 0);
    leds : OUT STD_LOGIC_VECTOR (3 downto 0);
    leds_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Advios_LedControl is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal last_clock : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal counter_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal grp_read_fu_78_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal last_clock_load_load_fu_104_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal v_V_1_fu_131_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_114_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_condition_75 : BOOLEAN;
    signal ap_condition_54 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    counter_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_75)) then
                if ((tmp_4_fu_121_p2 = ap_const_lv1_1)) then 
                    counter_V <= ap_const_lv4_0;
                elsif ((tmp_4_fu_121_p2 = ap_const_lv1_0)) then 
                    counter_V <= v_V_1_fu_131_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                last_clock <= (0=>clk_second, others=>'-');
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_condition_54_assign_proc : process(grp_read_fu_78_p2, last_clock_load_load_fu_104_p1, ap_CS_fsm_state2)
    begin
                ap_condition_54 <= ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_read_fu_78_p2 = ap_const_lv1_1) and (last_clock_load_load_fu_104_p1 = ap_const_lv1_0));
    end process;


    ap_condition_75_assign_proc : process(grp_read_fu_78_p2, last_clock_load_load_fu_104_p1, ap_CS_fsm_state2, tmp_3_fu_108_p2)
    begin
                ap_condition_75 <= ((tmp_3_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_read_fu_78_p2 = ap_const_lv1_1) and (last_clock_load_load_fu_104_p1 = ap_const_lv1_0));
    end process;

    grp_read_fu_78_p2 <= (0=>clk_second, others=>'-');
    last_clock_load_load_fu_104_p1 <= last_clock;

    leds_assign_proc : process(v_V_1_fu_131_p2, tmp_3_fu_108_p2, tmp_4_fu_121_p2, r_V_fu_114_p2, ap_condition_54)
    begin
        if ((ap_const_boolean_1 = ap_condition_54)) then
            if (((tmp_4_fu_121_p2 = ap_const_lv1_1) and (tmp_3_fu_108_p2 = ap_const_lv1_1))) then 
                leds <= ap_const_lv4_0;
            elsif (((tmp_3_fu_108_p2 = ap_const_lv1_1) and (tmp_4_fu_121_p2 = ap_const_lv1_0))) then 
                leds <= v_V_1_fu_131_p2;
            elsif ((tmp_3_fu_108_p2 = ap_const_lv1_0)) then 
                leds <= r_V_fu_114_p2;
            else 
                leds <= "XXXX";
            end if;
        else 
            leds <= "XXXX";
        end if; 
    end process;


    leds_ap_vld_assign_proc : process(grp_read_fu_78_p2, last_clock_load_load_fu_104_p1, ap_CS_fsm_state2, tmp_3_fu_108_p2, tmp_4_fu_121_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_read_fu_78_p2 = ap_const_lv1_1) and (tmp_3_fu_108_p2 = ap_const_lv1_0) and (last_clock_load_load_fu_104_p1 = ap_const_lv1_0)) or ((tmp_4_fu_121_p2 = ap_const_lv1_1) and (tmp_3_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_read_fu_78_p2 = ap_const_lv1_1) and (last_clock_load_load_fu_104_p1 = ap_const_lv1_0)) or ((tmp_3_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_read_fu_78_p2 = ap_const_lv1_1) and (tmp_4_fu_121_p2 = ap_const_lv1_0) and (last_clock_load_load_fu_104_p1 = ap_const_lv1_0)))) then 
            leds_ap_vld <= ap_const_logic_1;
        else 
            leds_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_V_fu_114_p2 <= (switches and ctrl);
    tmp_3_fu_108_p2 <= "1" when (ctrl = ap_const_lv4_0) else "0";
    tmp_4_fu_121_p2 <= "1" when (switches = ap_const_lv4_8) else "0";
    v_V_1_fu_131_p2 <= std_logic_vector(unsigned(counter_V) + unsigned(ap_const_lv4_1));
end behav;
