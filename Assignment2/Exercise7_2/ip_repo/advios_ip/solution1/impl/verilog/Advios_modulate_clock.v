// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Advios_modulate_clock (
        ap_clk,
        ap_rst,
        clk_second_i,
        clk_second_o,
        clk_second_o_ap_vld
);

parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   clk_second_i;
output   clk_second_o;
output   clk_second_o_ap_vld;

reg clk_second_o_ap_vld;

reg   [25:0] clock_counter_V;
wire   [0:0] tmp_1_fu_105_p2;
reg   [0:0] tmp_1_reg_124;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [25:0] clock_counter_V_assi_fu_93_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] v_fu_111_p0;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 clock_counter_V = 26'd0;
#0 ap_CS_fsm = 3'd2;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_1_reg_124 == 1'd1))) begin
        clock_counter_V <= 26'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        clock_counter_V <= clock_counter_V_assi_fu_93_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_1_reg_124 <= tmp_1_fu_105_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_1_reg_124 == 1'd1))) begin
        clk_second_o_ap_vld = 1'b1;
    end else begin
        clk_second_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign clk_second_o = (v_fu_111_p0 ^ 1'd1);

assign clock_counter_V_assi_fu_93_p2 = (clock_counter_V + 26'd1);

assign tmp_1_fu_105_p2 = ((clock_counter_V_assi_fu_93_p2 == 26'd50000000) ? 1'b1 : 1'b0);

assign v_fu_111_p0 = clk_second_i;

endmodule //Advios_modulate_clock
