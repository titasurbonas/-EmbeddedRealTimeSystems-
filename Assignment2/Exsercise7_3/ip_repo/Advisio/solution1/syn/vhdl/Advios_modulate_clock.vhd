-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Advios_modulate_clock is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    clk_sc_in : IN STD_LOGIC;
    clk_sc_out : OUT STD_LOGIC;
    clk_sc_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Advios_modulate_clock is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv26_1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_const_lv26_2FAF080 : STD_LOGIC_VECTOR (25 downto 0) := "10111110101111000010000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal clock_counter_V_fu_86 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal clock_counter_V_assi_fu_112_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_1_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_fu_129_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    clock_counter_V_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_fu_118_p2 = ap_const_lv1_0))) then 
                clock_counter_V_fu_86 <= clock_counter_V_assi_fu_112_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_fu_118_p2 = ap_const_lv1_1)))) then 
                clock_counter_V_fu_86 <= ap_const_lv26_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    clk_sc_out <= (v_fu_129_p0(0) xor ap_const_logic_1);

    clk_sc_out_ap_vld_assign_proc : process(ap_CS_fsm_state3, tmp_1_fu_118_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_fu_118_p2 = ap_const_lv1_1))) then 
            clk_sc_out_ap_vld <= ap_const_logic_1;
        else 
            clk_sc_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    clock_counter_V_assi_fu_112_p2 <= std_logic_vector(unsigned(clock_counter_V_fu_86) + unsigned(ap_const_lv26_1));
    tmp_1_fu_118_p2 <= "1" when (clock_counter_V_assi_fu_112_p2 = ap_const_lv26_2FAF080) else "0";
    v_fu_129_p0 <= (0=>clk_sc_in, others=>'-');
end behav;
