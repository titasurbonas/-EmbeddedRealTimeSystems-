-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Advios_LedControl is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ctrl : IN STD_LOGIC_VECTOR (3 downto 0);
    inSwitch : IN STD_LOGIC_VECTOR (3 downto 0);
    outLeds : OUT STD_LOGIC_VECTOR (3 downto 0);
    outLeds_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Advios_LedControl is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal counter_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal v_V_1_fu_127_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "10";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_110_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    counter_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_104_p2 = ap_const_lv1_1))) then
                if ((ap_const_lv1_1 = tmp_3_fu_117_p2)) then 
                    counter_V <= ap_const_lv4_0;
                elsif ((tmp_3_fu_117_p2 = ap_const_lv1_0)) then 
                    counter_V <= v_V_1_fu_127_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    outLeds_assign_proc : process(v_V_1_fu_127_p2, ap_CS_fsm_state2, tmp_fu_104_p2, tmp_3_fu_117_p2, r_V_fu_110_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if (((tmp_fu_104_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_3_fu_117_p2))) then 
                outLeds <= ap_const_lv4_0;
            elsif (((tmp_fu_104_p2 = ap_const_lv1_1) and (tmp_3_fu_117_p2 = ap_const_lv1_0))) then 
                outLeds <= v_V_1_fu_127_p2;
            elsif ((tmp_fu_104_p2 = ap_const_lv1_0)) then 
                outLeds <= r_V_fu_110_p2;
            else 
                outLeds <= "XXXX";
            end if;
        else 
            outLeds <= "XXXX";
        end if; 
    end process;


    outLeds_ap_vld_assign_proc : process(ap_CS_fsm_state2, tmp_fu_104_p2, tmp_3_fu_117_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_104_p2 = ap_const_lv1_1) and (tmp_3_fu_117_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_104_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_3_fu_117_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_104_p2 = ap_const_lv1_0)))) then 
            outLeds_ap_vld <= ap_const_logic_1;
        else 
            outLeds_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_V_fu_110_p2 <= (inSwitch and ctrl);
    tmp_3_fu_117_p2 <= "1" when (inSwitch = ap_const_lv4_8) else "0";
    tmp_fu_104_p2 <= "1" when (ctrl = ap_const_lv4_0) else "0";
    v_V_1_fu_127_p2 <= std_logic_vector(unsigned(counter_V) + unsigned(ap_const_lv4_1));
end behav;
