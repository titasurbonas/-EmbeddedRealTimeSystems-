// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Advios_modulate_clock.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Advios_modulate_clock::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Advios_modulate_clock::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> Advios_modulate_clock::ap_ST_fsm_state1 = "1";
const sc_lv<3> Advios_modulate_clock::ap_ST_fsm_state2 = "10";
const sc_lv<3> Advios_modulate_clock::ap_ST_fsm_state3 = "100";
const sc_lv<26> Advios_modulate_clock::ap_const_lv26_0 = "00000000000000000000000000";
const sc_lv<32> Advios_modulate_clock::ap_const_lv32_1 = "1";
const sc_lv<32> Advios_modulate_clock::ap_const_lv32_2 = "10";
const sc_lv<1> Advios_modulate_clock::ap_const_lv1_0 = "0";
const sc_lv<1> Advios_modulate_clock::ap_const_lv1_1 = "1";
const sc_lv<26> Advios_modulate_clock::ap_const_lv26_1 = "1";
const sc_lv<26> Advios_modulate_clock::ap_const_lv26_2FAF080 = "10111110101111000010000000";
const bool Advios_modulate_clock::ap_const_boolean_1 = true;

Advios_modulate_clock::Advios_modulate_clock(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_clk_sc_out);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_fu_118_p2 );
    sensitive << ( v_fu_129_p0 );

    SC_METHOD(thread_clk_sc_out_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_fu_118_p2 );

    SC_METHOD(thread_clock_counter_V_assi_fu_112_p2);
    sensitive << ( clock_counter_V_fu_86 );

    SC_METHOD(thread_tmp_1_fu_118_p2);
    sensitive << ( clock_counter_V_assi_fu_112_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_v_fu_129_p0);
    sensitive << ( clk_sc_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Advios_modulate_clock_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, clk_sc_in, "(port)clk_sc_in");
    sc_trace(mVcdFile, clk_sc_out, "(port)clk_sc_out");
    sc_trace(mVcdFile, clk_sc_out_ap_vld, "(port)clk_sc_out_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, clock_counter_V_fu_86, "clock_counter_V_fu_86");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, clock_counter_V_assi_fu_112_p2, "clock_counter_V_assi_fu_112_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_1_fu_118_p2, "tmp_1_fu_118_p2");
    sc_trace(mVcdFile, v_fu_129_p0, "v_fu_129_p0");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Advios_modulate_clock::~Advios_modulate_clock() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Advios_modulate_clock::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_118_p2.read(), ap_const_lv1_0))) {
        clock_counter_V_fu_86 = clock_counter_V_assi_fu_112_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(tmp_1_fu_118_p2.read(), ap_const_lv1_1)))) {
        clock_counter_V_fu_86 = ap_const_lv26_0;
    }
}

void Advios_modulate_clock::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Advios_modulate_clock::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Advios_modulate_clock::thread_clk_sc_out() {
    clk_sc_out =  (sc_logic) ((v_fu_129_p0.read() ^ ap_const_lv1_1))[0];
}

void Advios_modulate_clock::thread_clk_sc_out_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_118_p2.read(), ap_const_lv1_1))) {
        clk_sc_out_ap_vld = ap_const_logic_1;
    } else {
        clk_sc_out_ap_vld = ap_const_logic_0;
    }
}

void Advios_modulate_clock::thread_clock_counter_V_assi_fu_112_p2() {
    clock_counter_V_assi_fu_112_p2 = (!clock_counter_V_fu_86.read().is_01() || !ap_const_lv26_1.is_01())? sc_lv<26>(): (sc_biguint<26>(clock_counter_V_fu_86.read()) + sc_biguint<26>(ap_const_lv26_1));
}

void Advios_modulate_clock::thread_tmp_1_fu_118_p2() {
    tmp_1_fu_118_p2 = (!clock_counter_V_assi_fu_112_p2.read().is_01() || !ap_const_lv26_2FAF080.is_01())? sc_lv<1>(): sc_lv<1>(clock_counter_V_assi_fu_112_p2.read() == ap_const_lv26_2FAF080);
}

void Advios_modulate_clock::thread_v_fu_129_p0() {
    v_fu_129_p0 =  (sc_lv<1>) (clk_sc_in.read());
}

void Advios_modulate_clock::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

