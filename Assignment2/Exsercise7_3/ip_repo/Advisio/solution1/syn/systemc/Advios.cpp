// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Advios.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Advios::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Advios::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> Advios::ap_const_lv1_0 = "0";
const sc_lv<32> Advios::ap_const_lv32_1 = "1";
const sc_lv<2> Advios::ap_const_lv2_0 = "00";
const bool Advios::ap_const_boolean_1 = true;

Advios::Advios(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_Advios_LedControl_fu_76 = new Advios_LedControl("grp_Advios_LedControl_fu_76");
    grp_Advios_LedControl_fu_76->ap_clk(clk_sc_in);
    grp_Advios_LedControl_fu_76->ap_rst(reset);
    grp_Advios_LedControl_fu_76->ctrl(ctrl);
    grp_Advios_LedControl_fu_76->inSwitch(inSwitch);
    grp_Advios_LedControl_fu_76->outLeds(grp_Advios_LedControl_fu_76_outLeds);
    grp_Advios_LedControl_fu_76->outLeds_ap_vld(grp_Advios_LedControl_fu_76_outLeds_ap_vld);
    grp_Advios_modulate_clock_fu_96 = new Advios_modulate_clock("grp_Advios_modulate_clock_fu_96");
    grp_Advios_modulate_clock_fu_96->ap_clk(clk);
    grp_Advios_modulate_clock_fu_96->ap_rst(reset);
    grp_Advios_modulate_clock_fu_96->clk_sc_in(ap_var_for_const0);
    grp_Advios_modulate_clock_fu_96->clk_sc_out(grp_Advios_modulate_clock_fu_96_clk_sc_out);
    grp_Advios_modulate_clock_fu_96->clk_sc_out_ap_vld(grp_Advios_modulate_clock_fu_96_clk_sc_out_ap_vld);

    SC_METHOD(thread_clk_sc_out);
    dont_initialize();
    sensitive << ( clk.pos() );

    SC_METHOD(thread_outLeds);
    dont_initialize();
    sensitive << ( clk_sc_in.pos() );

    SC_METHOD(thread_Advios_ssdm_threa_load_fu_114_p1);

    SC_METHOD(thread_ap_CS_fsm);

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_ap_var_for_const0);

    clk_sc_out.initialize(SC_LOGIC_0);
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Advios_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, clk, "(port)clk");
    sc_trace(mVcdFile, clk_sc_in, "(port)clk_sc_in");
    sc_trace(mVcdFile, clk_sc_out, "(port)clk_sc_out");
    sc_trace(mVcdFile, reset, "(port)reset");
    sc_trace(mVcdFile, ctrl, "(port)ctrl");
    sc_trace(mVcdFile, inSwitch, "(port)inSwitch");
    sc_trace(mVcdFile, outLeds, "(port)outLeds");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, Advios_ssdm_threa_load_fu_114_p1, "Advios_ssdm_threa_load_fu_114_p1");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, grp_Advios_LedControl_fu_76_outLeds, "grp_Advios_LedControl_fu_76_outLeds");
    sc_trace(mVcdFile, grp_Advios_LedControl_fu_76_outLeds_ap_vld, "grp_Advios_LedControl_fu_76_outLeds_ap_vld");
    sc_trace(mVcdFile, grp_Advios_modulate_clock_fu_96_clk_sc_out, "grp_Advios_modulate_clock_fu_96_clk_sc_out");
    sc_trace(mVcdFile, grp_Advios_modulate_clock_fu_96_clk_sc_out_ap_vld, "grp_Advios_modulate_clock_fu_96_clk_sc_out_ap_vld");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
#endif

    }
}

Advios::~Advios() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_Advios_LedControl_fu_76;
    delete grp_Advios_modulate_clock_fu_96;
}

void Advios::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_0;
}

void Advios::thread_clk_sc_out() {
    if ( reset.read() == ap_const_logic_1) {
        clk_sc_out =  (sc_logic) (ap_const_lv1_0[0]);
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Advios_modulate_clock_fu_96_clk_sc_out_ap_vld.read())) {
            clk_sc_out = grp_Advios_modulate_clock_fu_96_clk_sc_out.read();
        }
    }
}

void Advios::thread_outLeds() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Advios_LedControl_fu_76_outLeds_ap_vld.read())) {
        outLeds = grp_Advios_LedControl_fu_76_outLeds.read();
    }
}

void Advios::thread_Advios_ssdm_threa_load_fu_114_p1() {
    Advios_ssdm_threa_load_fu_114_p1 = ap_const_lv1_0;
}

void Advios::thread_ap_CS_fsm() {
    ap_CS_fsm = ap_const_lv2_0;
}

void Advios::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

}

