// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _apply_HH_
#define _apply_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "apply_mul_mul_18nbkb.h"
#include "apply_hist.h"
#include "apply_fir_io_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_FIR_IO_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_FIR_IO_DATA_WIDTH = 32>
struct apply : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_fir_io_AWVALID;
    sc_out< sc_logic > s_axi_fir_io_AWREADY;
    sc_in< sc_uint<C_S_AXI_FIR_IO_ADDR_WIDTH> > s_axi_fir_io_AWADDR;
    sc_in< sc_logic > s_axi_fir_io_WVALID;
    sc_out< sc_logic > s_axi_fir_io_WREADY;
    sc_in< sc_uint<C_S_AXI_FIR_IO_DATA_WIDTH> > s_axi_fir_io_WDATA;
    sc_in< sc_uint<C_S_AXI_FIR_IO_DATA_WIDTH/8> > s_axi_fir_io_WSTRB;
    sc_in< sc_logic > s_axi_fir_io_ARVALID;
    sc_out< sc_logic > s_axi_fir_io_ARREADY;
    sc_in< sc_uint<C_S_AXI_FIR_IO_ADDR_WIDTH> > s_axi_fir_io_ARADDR;
    sc_out< sc_logic > s_axi_fir_io_RVALID;
    sc_in< sc_logic > s_axi_fir_io_RREADY;
    sc_out< sc_uint<C_S_AXI_FIR_IO_DATA_WIDTH> > s_axi_fir_io_RDATA;
    sc_out< sc_lv<2> > s_axi_fir_io_RRESP;
    sc_out< sc_logic > s_axi_fir_io_BVALID;
    sc_in< sc_logic > s_axi_fir_io_BREADY;
    sc_out< sc_lv<2> > s_axi_fir_io_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    apply(sc_module_name name);
    SC_HAS_PROCESS(apply);

    ~apply();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    apply_hist* hist_U;
    apply_fir_io_s_axi<C_S_AXI_FIR_IO_ADDR_WIDTH,C_S_AXI_FIR_IO_DATA_WIDTH>* apply_fir_io_s_axi_U;
    apply_mul_mul_18nbkb<1,1,18,16,34>* apply_mul_mul_18nbkb_U1;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > Y_ap_vld;
    sc_signal< sc_lv<16> > x;
    sc_signal< sc_lv<6> > hist_address0;
    sc_signal< sc_logic > hist_ce0;
    sc_signal< sc_logic > hist_we0;
    sc_signal< sc_lv<16> > hist_d0;
    sc_signal< sc_lv<16> > hist_q0;
    sc_signal< sc_lv<16> > x_read_reg_278;
    sc_signal< sc_lv<6> > i_1_fu_160_p2;
    sc_signal< sc_lv<6> > i_1_reg_286;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond_fu_154_p2;
    sc_signal< sc_lv<16> > hist_load_reg_296;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_10_reg_301;
    sc_signal< sc_lv<34> > mul_fu_271_p2;
    sc_signal< sc_lv<34> > mul_reg_307;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<33> > tmp_8_fu_188_p1;
    sc_signal< sc_lv<33> > tmp_8_reg_312;
    sc_signal< sc_lv<16> > tmp_fu_243_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<6> > j_1_fu_255_p2;
    sc_signal< sc_lv<6> > j_1_reg_325;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > tmp_9_fu_249_p2;
    sc_signal< sc_lv<16> > tmp1_reg_118;
    sc_signal< sc_lv<6> > i_reg_131;
    sc_signal< sc_lv<6> > j_reg_142;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<64> > tmp_3_fu_172_p1;
    sc_signal< sc_lv<64> > tmp_s_fu_261_p1;
    sc_signal< sc_lv<64> > tmp_1_fu_266_p1;
    sc_signal< sc_lv<6> > tmp_2_fu_166_p2;
    sc_signal< sc_lv<16> > tmp_10_fu_177_p1;
    sc_signal< sc_lv<33> > neg_mul_fu_191_p2;
    sc_signal< sc_lv<11> > tmp_11_fu_196_p4;
    sc_signal< sc_lv<12> > tmp_12_fu_210_p4;
    sc_signal< sc_lv<16> > tmp_5_fu_206_p1;
    sc_signal< sc_lv<16> > tmp_6_fu_219_p1;
    sc_signal< sc_lv<16> > tmp_7_fu_223_p3;
    sc_signal< sc_lv<16> > neg_ti_fu_230_p2;
    sc_signal< sc_lv<16> > tmp_4_fu_236_p3;
    sc_signal< sc_lv<18> > mul_fu_271_p0;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<6> ap_const_lv6_26;
    static const sc_lv<6> ap_const_lv6_29;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<6> ap_const_lv6_28;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<33> ap_const_lv33_0;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_21;
    static const sc_lv<6> ap_const_lv6_3F;
    static const sc_lv<34> ap_const_lv34_18F9D;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_Y_ap_vld();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_exitcond_fu_154_p2();
    void thread_hist_address0();
    void thread_hist_ce0();
    void thread_hist_d0();
    void thread_hist_we0();
    void thread_i_1_fu_160_p2();
    void thread_j_1_fu_255_p2();
    void thread_mul_fu_271_p0();
    void thread_neg_mul_fu_191_p2();
    void thread_neg_ti_fu_230_p2();
    void thread_tmp_10_fu_177_p1();
    void thread_tmp_11_fu_196_p4();
    void thread_tmp_12_fu_210_p4();
    void thread_tmp_1_fu_266_p1();
    void thread_tmp_2_fu_166_p2();
    void thread_tmp_3_fu_172_p1();
    void thread_tmp_4_fu_236_p3();
    void thread_tmp_5_fu_206_p1();
    void thread_tmp_6_fu_219_p1();
    void thread_tmp_7_fu_223_p3();
    void thread_tmp_8_fu_188_p1();
    void thread_tmp_9_fu_249_p2();
    void thread_tmp_fu_243_p2();
    void thread_tmp_s_fu_261_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
