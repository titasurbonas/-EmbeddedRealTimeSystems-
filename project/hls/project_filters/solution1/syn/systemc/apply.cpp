// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "apply.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic apply::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic apply::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> apply::ap_ST_fsm_state1 = "1";
const sc_lv<7> apply::ap_ST_fsm_state2 = "10";
const sc_lv<7> apply::ap_ST_fsm_state3 = "100";
const sc_lv<7> apply::ap_ST_fsm_state4 = "1000";
const sc_lv<7> apply::ap_ST_fsm_state5 = "10000";
const sc_lv<7> apply::ap_ST_fsm_state6 = "100000";
const sc_lv<7> apply::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> apply::ap_const_lv32_0 = "00000000000000000000000000000000";
const int apply::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> apply::ap_const_lv32_1 = "1";
const sc_lv<1> apply::ap_const_lv1_0 = "0";
const sc_lv<32> apply::ap_const_lv32_2 = "10";
const sc_lv<32> apply::ap_const_lv32_3 = "11";
const sc_lv<1> apply::ap_const_lv1_1 = "1";
const sc_lv<32> apply::ap_const_lv32_4 = "100";
const sc_lv<32> apply::ap_const_lv32_5 = "101";
const sc_lv<16> apply::ap_const_lv16_0 = "0000000000000000";
const sc_lv<6> apply::ap_const_lv6_0 = "000000";
const sc_lv<32> apply::ap_const_lv32_6 = "110";
const sc_lv<6> apply::ap_const_lv6_26 = "100110";
const sc_lv<6> apply::ap_const_lv6_29 = "101001";
const sc_lv<6> apply::ap_const_lv6_1 = "1";
const sc_lv<6> apply::ap_const_lv6_28 = "101000";
const sc_lv<32> apply::ap_const_lv32_F = "1111";
const sc_lv<33> apply::ap_const_lv33_0 = "000000000000000000000000000000000";
const sc_lv<32> apply::ap_const_lv32_16 = "10110";
const sc_lv<32> apply::ap_const_lv32_20 = "100000";
const sc_lv<32> apply::ap_const_lv32_21 = "100001";
const sc_lv<6> apply::ap_const_lv6_3F = "111111";
const sc_lv<34> apply::ap_const_lv34_18F9D = "11000111110011101";
const bool apply::ap_const_boolean_1 = true;

apply::apply(sc_module_name name) : sc_module(name), mVcdFile(0) {
    hist_U = new apply_hist("hist_U");
    hist_U->clk(ap_clk);
    hist_U->reset(ap_rst_n_inv);
    hist_U->address0(hist_address0);
    hist_U->ce0(hist_ce0);
    hist_U->we0(hist_we0);
    hist_U->d0(hist_d0);
    hist_U->q0(hist_q0);
    apply_fir_io_s_axi_U = new apply_fir_io_s_axi<C_S_AXI_FIR_IO_ADDR_WIDTH,C_S_AXI_FIR_IO_DATA_WIDTH>("apply_fir_io_s_axi_U");
    apply_fir_io_s_axi_U->AWVALID(s_axi_fir_io_AWVALID);
    apply_fir_io_s_axi_U->AWREADY(s_axi_fir_io_AWREADY);
    apply_fir_io_s_axi_U->AWADDR(s_axi_fir_io_AWADDR);
    apply_fir_io_s_axi_U->WVALID(s_axi_fir_io_WVALID);
    apply_fir_io_s_axi_U->WREADY(s_axi_fir_io_WREADY);
    apply_fir_io_s_axi_U->WDATA(s_axi_fir_io_WDATA);
    apply_fir_io_s_axi_U->WSTRB(s_axi_fir_io_WSTRB);
    apply_fir_io_s_axi_U->ARVALID(s_axi_fir_io_ARVALID);
    apply_fir_io_s_axi_U->ARREADY(s_axi_fir_io_ARREADY);
    apply_fir_io_s_axi_U->ARADDR(s_axi_fir_io_ARADDR);
    apply_fir_io_s_axi_U->RVALID(s_axi_fir_io_RVALID);
    apply_fir_io_s_axi_U->RREADY(s_axi_fir_io_RREADY);
    apply_fir_io_s_axi_U->RDATA(s_axi_fir_io_RDATA);
    apply_fir_io_s_axi_U->RRESP(s_axi_fir_io_RRESP);
    apply_fir_io_s_axi_U->BVALID(s_axi_fir_io_BVALID);
    apply_fir_io_s_axi_U->BREADY(s_axi_fir_io_BREADY);
    apply_fir_io_s_axi_U->BRESP(s_axi_fir_io_BRESP);
    apply_fir_io_s_axi_U->ACLK(ap_clk);
    apply_fir_io_s_axi_U->ARESET(ap_rst_n_inv);
    apply_fir_io_s_axi_U->ACLK_EN(ap_var_for_const0);
    apply_fir_io_s_axi_U->ap_start(ap_start);
    apply_fir_io_s_axi_U->interrupt(interrupt);
    apply_fir_io_s_axi_U->ap_ready(ap_ready);
    apply_fir_io_s_axi_U->ap_done(ap_done);
    apply_fir_io_s_axi_U->ap_idle(ap_idle);
    apply_fir_io_s_axi_U->Y(tmp1_reg_118);
    apply_fir_io_s_axi_U->Y_ap_vld(Y_ap_vld);
    apply_fir_io_s_axi_U->x(x);
    apply_mul_mul_18nbkb_U1 = new apply_mul_mul_18nbkb<1,1,18,16,34>("apply_mul_mul_18nbkb_U1");
    apply_mul_mul_18nbkb_U1->din0(mul_fu_271_p0);
    apply_mul_mul_18nbkb_U1->din1(hist_load_reg_296);
    apply_mul_mul_18nbkb_U1->dout(mul_fu_271_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Y_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_9_fu_249_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_9_fu_249_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_9_fu_249_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_exitcond_fu_154_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_131 );

    SC_METHOD(thread_hist_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_9_fu_249_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_3_fu_172_p1 );
    sensitive << ( tmp_s_fu_261_p1 );
    sensitive << ( tmp_1_fu_266_p1 );

    SC_METHOD(thread_hist_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_9_fu_249_p2 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_hist_d0);
    sensitive << ( hist_q0 );
    sensitive << ( x_read_reg_278 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_9_fu_249_p2 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_hist_we0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_9_fu_249_p2 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_i_1_fu_160_p2);
    sensitive << ( i_reg_131 );

    SC_METHOD(thread_j_1_fu_255_p2);
    sensitive << ( j_reg_142 );

    SC_METHOD(thread_mul_fu_271_p0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_neg_mul_fu_191_p2);
    sensitive << ( tmp_8_reg_312 );

    SC_METHOD(thread_neg_ti_fu_230_p2);
    sensitive << ( tmp_7_fu_223_p3 );

    SC_METHOD(thread_tmp_10_fu_177_p1);
    sensitive << ( hist_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_11_fu_196_p4);
    sensitive << ( neg_mul_fu_191_p2 );

    SC_METHOD(thread_tmp_12_fu_210_p4);
    sensitive << ( mul_reg_307 );

    SC_METHOD(thread_tmp_1_fu_266_p1);
    sensitive << ( j_reg_142 );

    SC_METHOD(thread_tmp_2_fu_166_p2);
    sensitive << ( i_reg_131 );

    SC_METHOD(thread_tmp_3_fu_172_p1);
    sensitive << ( tmp_2_fu_166_p2 );

    SC_METHOD(thread_tmp_4_fu_236_p3);
    sensitive << ( tmp_10_reg_301 );
    sensitive << ( tmp_6_fu_219_p1 );
    sensitive << ( neg_ti_fu_230_p2 );

    SC_METHOD(thread_tmp_5_fu_206_p1);
    sensitive << ( tmp_11_fu_196_p4 );

    SC_METHOD(thread_tmp_6_fu_219_p1);
    sensitive << ( tmp_12_fu_210_p4 );

    SC_METHOD(thread_tmp_7_fu_223_p3);
    sensitive << ( tmp_10_reg_301 );
    sensitive << ( tmp_5_fu_206_p1 );
    sensitive << ( tmp_6_fu_219_p1 );

    SC_METHOD(thread_tmp_8_fu_188_p1);
    sensitive << ( mul_fu_271_p2 );

    SC_METHOD(thread_tmp_9_fu_249_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( j_reg_142 );

    SC_METHOD(thread_tmp_fu_243_p2);
    sensitive << ( tmp1_reg_118 );
    sensitive << ( tmp_4_fu_236_p3 );

    SC_METHOD(thread_tmp_s_fu_261_p1);
    sensitive << ( j_1_fu_255_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_154_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_9_fu_249_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "apply_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_fir_io_AWVALID, "(port)s_axi_fir_io_AWVALID");
    sc_trace(mVcdFile, s_axi_fir_io_AWREADY, "(port)s_axi_fir_io_AWREADY");
    sc_trace(mVcdFile, s_axi_fir_io_AWADDR, "(port)s_axi_fir_io_AWADDR");
    sc_trace(mVcdFile, s_axi_fir_io_WVALID, "(port)s_axi_fir_io_WVALID");
    sc_trace(mVcdFile, s_axi_fir_io_WREADY, "(port)s_axi_fir_io_WREADY");
    sc_trace(mVcdFile, s_axi_fir_io_WDATA, "(port)s_axi_fir_io_WDATA");
    sc_trace(mVcdFile, s_axi_fir_io_WSTRB, "(port)s_axi_fir_io_WSTRB");
    sc_trace(mVcdFile, s_axi_fir_io_ARVALID, "(port)s_axi_fir_io_ARVALID");
    sc_trace(mVcdFile, s_axi_fir_io_ARREADY, "(port)s_axi_fir_io_ARREADY");
    sc_trace(mVcdFile, s_axi_fir_io_ARADDR, "(port)s_axi_fir_io_ARADDR");
    sc_trace(mVcdFile, s_axi_fir_io_RVALID, "(port)s_axi_fir_io_RVALID");
    sc_trace(mVcdFile, s_axi_fir_io_RREADY, "(port)s_axi_fir_io_RREADY");
    sc_trace(mVcdFile, s_axi_fir_io_RDATA, "(port)s_axi_fir_io_RDATA");
    sc_trace(mVcdFile, s_axi_fir_io_RRESP, "(port)s_axi_fir_io_RRESP");
    sc_trace(mVcdFile, s_axi_fir_io_BVALID, "(port)s_axi_fir_io_BVALID");
    sc_trace(mVcdFile, s_axi_fir_io_BREADY, "(port)s_axi_fir_io_BREADY");
    sc_trace(mVcdFile, s_axi_fir_io_BRESP, "(port)s_axi_fir_io_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, Y_ap_vld, "Y_ap_vld");
    sc_trace(mVcdFile, x, "x");
    sc_trace(mVcdFile, hist_address0, "hist_address0");
    sc_trace(mVcdFile, hist_ce0, "hist_ce0");
    sc_trace(mVcdFile, hist_we0, "hist_we0");
    sc_trace(mVcdFile, hist_d0, "hist_d0");
    sc_trace(mVcdFile, hist_q0, "hist_q0");
    sc_trace(mVcdFile, x_read_reg_278, "x_read_reg_278");
    sc_trace(mVcdFile, i_1_fu_160_p2, "i_1_fu_160_p2");
    sc_trace(mVcdFile, i_1_reg_286, "i_1_reg_286");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_fu_154_p2, "exitcond_fu_154_p2");
    sc_trace(mVcdFile, hist_load_reg_296, "hist_load_reg_296");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_10_reg_301, "tmp_10_reg_301");
    sc_trace(mVcdFile, mul_fu_271_p2, "mul_fu_271_p2");
    sc_trace(mVcdFile, mul_reg_307, "mul_reg_307");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_8_fu_188_p1, "tmp_8_fu_188_p1");
    sc_trace(mVcdFile, tmp_8_reg_312, "tmp_8_reg_312");
    sc_trace(mVcdFile, tmp_fu_243_p2, "tmp_fu_243_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, j_1_fu_255_p2, "j_1_fu_255_p2");
    sc_trace(mVcdFile, j_1_reg_325, "j_1_reg_325");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_9_fu_249_p2, "tmp_9_fu_249_p2");
    sc_trace(mVcdFile, tmp1_reg_118, "tmp1_reg_118");
    sc_trace(mVcdFile, i_reg_131, "i_reg_131");
    sc_trace(mVcdFile, j_reg_142, "j_reg_142");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_3_fu_172_p1, "tmp_3_fu_172_p1");
    sc_trace(mVcdFile, tmp_s_fu_261_p1, "tmp_s_fu_261_p1");
    sc_trace(mVcdFile, tmp_1_fu_266_p1, "tmp_1_fu_266_p1");
    sc_trace(mVcdFile, tmp_2_fu_166_p2, "tmp_2_fu_166_p2");
    sc_trace(mVcdFile, tmp_10_fu_177_p1, "tmp_10_fu_177_p1");
    sc_trace(mVcdFile, neg_mul_fu_191_p2, "neg_mul_fu_191_p2");
    sc_trace(mVcdFile, tmp_11_fu_196_p4, "tmp_11_fu_196_p4");
    sc_trace(mVcdFile, tmp_12_fu_210_p4, "tmp_12_fu_210_p4");
    sc_trace(mVcdFile, tmp_5_fu_206_p1, "tmp_5_fu_206_p1");
    sc_trace(mVcdFile, tmp_6_fu_219_p1, "tmp_6_fu_219_p1");
    sc_trace(mVcdFile, tmp_7_fu_223_p3, "tmp_7_fu_223_p3");
    sc_trace(mVcdFile, neg_ti_fu_230_p2, "neg_ti_fu_230_p2");
    sc_trace(mVcdFile, tmp_4_fu_236_p3, "tmp_4_fu_236_p3");
    sc_trace(mVcdFile, mul_fu_271_p0, "mul_fu_271_p0");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("apply.hdltvin.dat");
    mHdltvoutHandle.open("apply.hdltvout.dat");
}

apply::~apply() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete hist_U;
    delete apply_fir_io_s_axi_U;
    delete apply_mul_mul_18nbkb_U1;
}

void apply::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void apply::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_reg_131 = i_1_reg_286.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_131 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_154_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        j_reg_142 = ap_const_lv6_26;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        j_reg_142 = j_1_reg_325.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp1_reg_118 = tmp_fu_243_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp1_reg_118 = ap_const_lv16_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        hist_load_reg_296 = hist_q0.read();
        tmp_10_reg_301 = tmp_10_fu_177_p1.read().range(15, 15);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_286 = i_1_fu_160_p2.read();
    }
    if ((esl_seteq<1,1,1>(tmp_9_fu_249_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        j_1_reg_325 = j_1_fu_255_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        mul_reg_307 = mul_fu_271_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(tmp_10_reg_301.read(), ap_const_lv1_1))) {
        tmp_8_reg_312 = tmp_8_fu_188_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        x_read_reg_278 = x.read();
    }
}

void apply::thread_Y_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(tmp_9_fu_249_p2.read(), ap_const_lv1_1))) {
        Y_ap_vld = ap_const_logic_1;
    } else {
        Y_ap_vld = ap_const_logic_0;
    }
}

void apply::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void apply::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void apply::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void apply::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void apply::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void apply::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void apply::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void apply::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(tmp_9_fu_249_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void apply::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void apply::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(tmp_9_fu_249_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void apply::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void apply::thread_exitcond_fu_154_p2() {
    exitcond_fu_154_p2 = (!i_reg_131.read().is_01() || !ap_const_lv6_29.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_131.read() == ap_const_lv6_29);
}

void apply::thread_hist_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        hist_address0 =  (sc_lv<6>) (tmp_1_fu_266_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(tmp_9_fu_249_p2.read(), ap_const_lv1_1))) {
        hist_address0 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(tmp_9_fu_249_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        hist_address0 =  (sc_lv<6>) (tmp_s_fu_261_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        hist_address0 =  (sc_lv<6>) (tmp_3_fu_172_p1.read());
    } else {
        hist_address0 = "XXXXXX";
    }
}

void apply::thread_hist_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(tmp_9_fu_249_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(tmp_9_fu_249_p2.read(), ap_const_lv1_1)))) {
        hist_ce0 = ap_const_logic_1;
    } else {
        hist_ce0 = ap_const_logic_0;
    }
}

void apply::thread_hist_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        hist_d0 = hist_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(tmp_9_fu_249_p2.read(), ap_const_lv1_1))) {
        hist_d0 = x_read_reg_278.read();
    } else {
        hist_d0 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void apply::thread_hist_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(tmp_9_fu_249_p2.read(), ap_const_lv1_1)))) {
        hist_we0 = ap_const_logic_1;
    } else {
        hist_we0 = ap_const_logic_0;
    }
}

void apply::thread_i_1_fu_160_p2() {
    i_1_fu_160_p2 = (!i_reg_131.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_131.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void apply::thread_j_1_fu_255_p2() {
    j_1_fu_255_p2 = (!j_reg_142.read().is_01() || !ap_const_lv6_3F.is_01())? sc_lv<6>(): (sc_biguint<6>(j_reg_142.read()) + sc_bigint<6>(ap_const_lv6_3F));
}

void apply::thread_mul_fu_271_p0() {
    mul_fu_271_p0 =  (sc_lv<18>) (ap_const_lv34_18F9D);
}

void apply::thread_neg_mul_fu_191_p2() {
    neg_mul_fu_191_p2 = (!ap_const_lv33_0.is_01() || !tmp_8_reg_312.read().is_01())? sc_lv<33>(): (sc_biguint<33>(ap_const_lv33_0) - sc_biguint<33>(tmp_8_reg_312.read()));
}

void apply::thread_neg_ti_fu_230_p2() {
    neg_ti_fu_230_p2 = (!ap_const_lv16_0.is_01() || !tmp_7_fu_223_p3.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_0) - sc_biguint<16>(tmp_7_fu_223_p3.read()));
}

void apply::thread_tmp_10_fu_177_p1() {
    tmp_10_fu_177_p1 = hist_q0.read();
}

void apply::thread_tmp_11_fu_196_p4() {
    tmp_11_fu_196_p4 = neg_mul_fu_191_p2.read().range(32, 22);
}

void apply::thread_tmp_12_fu_210_p4() {
    tmp_12_fu_210_p4 = mul_reg_307.read().range(33, 22);
}

void apply::thread_tmp_1_fu_266_p1() {
    tmp_1_fu_266_p1 = esl_zext<64,6>(j_reg_142.read());
}

void apply::thread_tmp_2_fu_166_p2() {
    tmp_2_fu_166_p2 = (!ap_const_lv6_28.is_01() || !i_reg_131.read().is_01())? sc_lv<6>(): (sc_bigint<6>(ap_const_lv6_28) - sc_biguint<6>(i_reg_131.read()));
}

void apply::thread_tmp_3_fu_172_p1() {
    tmp_3_fu_172_p1 = esl_zext<64,6>(tmp_2_fu_166_p2.read());
}

void apply::thread_tmp_4_fu_236_p3() {
    tmp_4_fu_236_p3 = (!tmp_10_reg_301.read()[0].is_01())? sc_lv<16>(): ((tmp_10_reg_301.read()[0].to_bool())? neg_ti_fu_230_p2.read(): tmp_6_fu_219_p1.read());
}

void apply::thread_tmp_5_fu_206_p1() {
    tmp_5_fu_206_p1 = esl_sext<16,11>(tmp_11_fu_196_p4.read());
}

void apply::thread_tmp_6_fu_219_p1() {
    tmp_6_fu_219_p1 = esl_sext<16,12>(tmp_12_fu_210_p4.read());
}

void apply::thread_tmp_7_fu_223_p3() {
    tmp_7_fu_223_p3 = (!tmp_10_reg_301.read()[0].is_01())? sc_lv<16>(): ((tmp_10_reg_301.read()[0].to_bool())? tmp_5_fu_206_p1.read(): tmp_6_fu_219_p1.read());
}

void apply::thread_tmp_8_fu_188_p1() {
    tmp_8_fu_188_p1 = mul_fu_271_p2.read().range(33-1, 0);
}

void apply::thread_tmp_9_fu_249_p2() {
    tmp_9_fu_249_p2 = (!j_reg_142.read().is_01() || !ap_const_lv6_0.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_142.read() == ap_const_lv6_0);
}

void apply::thread_tmp_fu_243_p2() {
    tmp_fu_243_p2 = (!tmp1_reg_118.read().is_01() || !tmp_4_fu_236_p3.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp1_reg_118.read()) + sc_biguint<16>(tmp_4_fu_236_p3.read()));
}

void apply::thread_tmp_s_fu_261_p1() {
    tmp_s_fu_261_p1 = esl_zext<64,6>(j_1_fu_255_p2.read());
}

void apply::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_154_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(tmp_9_fu_249_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

void apply::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_AWVALID\" :  \"" << s_axi_fir_io_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_fir_io_AWREADY\" :  \"" << s_axi_fir_io_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_AWADDR\" :  \"" << s_axi_fir_io_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_WVALID\" :  \"" << s_axi_fir_io_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_WREADY\" :  \"" << s_axi_fir_io_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_WDATA\" :  \"" << s_axi_fir_io_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_WSTRB\" :  \"" << s_axi_fir_io_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_ARVALID\" :  \"" << s_axi_fir_io_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_ARREADY\" :  \"" << s_axi_fir_io_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_ARADDR\" :  \"" << s_axi_fir_io_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_RVALID\" :  \"" << s_axi_fir_io_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_RREADY\" :  \"" << s_axi_fir_io_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_RDATA\" :  \"" << s_axi_fir_io_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_RRESP\" :  \"" << s_axi_fir_io_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_BVALID\" :  \"" << s_axi_fir_io_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_BREADY\" :  \"" << s_axi_fir_io_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_BRESP\" :  \"" << s_axi_fir_io_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

