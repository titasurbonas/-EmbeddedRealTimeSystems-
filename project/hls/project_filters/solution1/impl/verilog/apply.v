// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="apply,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=242,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=259,HLS_SYN_LUT=409,HLS_VERSION=2018_2}" *)

module apply (
        ap_clk,
        ap_rst_n,
        s_axi_fir_io_AWVALID,
        s_axi_fir_io_AWREADY,
        s_axi_fir_io_AWADDR,
        s_axi_fir_io_WVALID,
        s_axi_fir_io_WREADY,
        s_axi_fir_io_WDATA,
        s_axi_fir_io_WSTRB,
        s_axi_fir_io_ARVALID,
        s_axi_fir_io_ARREADY,
        s_axi_fir_io_ARADDR,
        s_axi_fir_io_RVALID,
        s_axi_fir_io_RREADY,
        s_axi_fir_io_RDATA,
        s_axi_fir_io_RRESP,
        s_axi_fir_io_BVALID,
        s_axi_fir_io_BREADY,
        s_axi_fir_io_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;
parameter    C_S_AXI_FIR_IO_DATA_WIDTH = 32;
parameter    C_S_AXI_FIR_IO_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_FIR_IO_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_fir_io_AWVALID;
output   s_axi_fir_io_AWREADY;
input  [C_S_AXI_FIR_IO_ADDR_WIDTH - 1:0] s_axi_fir_io_AWADDR;
input   s_axi_fir_io_WVALID;
output   s_axi_fir_io_WREADY;
input  [C_S_AXI_FIR_IO_DATA_WIDTH - 1:0] s_axi_fir_io_WDATA;
input  [C_S_AXI_FIR_IO_WSTRB_WIDTH - 1:0] s_axi_fir_io_WSTRB;
input   s_axi_fir_io_ARVALID;
output   s_axi_fir_io_ARREADY;
input  [C_S_AXI_FIR_IO_ADDR_WIDTH - 1:0] s_axi_fir_io_ARADDR;
output   s_axi_fir_io_RVALID;
input   s_axi_fir_io_RREADY;
output  [C_S_AXI_FIR_IO_DATA_WIDTH - 1:0] s_axi_fir_io_RDATA;
output  [1:0] s_axi_fir_io_RRESP;
output   s_axi_fir_io_BVALID;
input   s_axi_fir_io_BREADY;
output  [1:0] s_axi_fir_io_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    Y_ap_vld;
wire   [15:0] x;
reg   [5:0] hist_address0;
reg    hist_ce0;
reg    hist_we0;
reg   [15:0] hist_d0;
wire   [15:0] hist_q0;
reg   [15:0] x_read_reg_278;
wire   [5:0] i_1_fu_160_p2;
reg   [5:0] i_1_reg_286;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_154_p2;
reg  signed [15:0] hist_load_reg_296;
wire    ap_CS_fsm_state3;
reg   [0:0] tmp_10_reg_301;
wire  signed [33:0] mul_fu_271_p2;
reg  signed [33:0] mul_reg_307;
wire    ap_CS_fsm_state4;
wire   [32:0] tmp_8_fu_188_p1;
reg   [32:0] tmp_8_reg_312;
wire   [15:0] tmp_fu_243_p2;
wire    ap_CS_fsm_state5;
wire   [5:0] j_1_fu_255_p2;
reg   [5:0] j_1_reg_325;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_9_fu_249_p2;
reg   [15:0] tmp1_reg_118;
reg   [5:0] i_reg_131;
reg   [5:0] j_reg_142;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_3_fu_172_p1;
wire   [63:0] tmp_s_fu_261_p1;
wire   [63:0] tmp_1_fu_266_p1;
wire   [5:0] tmp_2_fu_166_p2;
wire  signed [15:0] tmp_10_fu_177_p1;
wire   [32:0] neg_mul_fu_191_p2;
wire   [10:0] tmp_11_fu_196_p4;
wire   [11:0] tmp_12_fu_210_p4;
wire  signed [15:0] tmp_5_fu_206_p1;
wire  signed [15:0] tmp_6_fu_219_p1;
wire   [15:0] tmp_7_fu_223_p3;
wire   [15:0] neg_ti_fu_230_p2;
wire   [15:0] tmp_4_fu_236_p3;
wire   [17:0] mul_fu_271_p0;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

apply_hist #(
    .DataWidth( 16 ),
    .AddressRange( 40 ),
    .AddressWidth( 6 ))
hist_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hist_address0),
    .ce0(hist_ce0),
    .we0(hist_we0),
    .d0(hist_d0),
    .q0(hist_q0)
);

apply_fir_io_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_FIR_IO_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_FIR_IO_DATA_WIDTH ))
apply_fir_io_s_axi_U(
    .AWVALID(s_axi_fir_io_AWVALID),
    .AWREADY(s_axi_fir_io_AWREADY),
    .AWADDR(s_axi_fir_io_AWADDR),
    .WVALID(s_axi_fir_io_WVALID),
    .WREADY(s_axi_fir_io_WREADY),
    .WDATA(s_axi_fir_io_WDATA),
    .WSTRB(s_axi_fir_io_WSTRB),
    .ARVALID(s_axi_fir_io_ARVALID),
    .ARREADY(s_axi_fir_io_ARREADY),
    .ARADDR(s_axi_fir_io_ARADDR),
    .RVALID(s_axi_fir_io_RVALID),
    .RREADY(s_axi_fir_io_RREADY),
    .RDATA(s_axi_fir_io_RDATA),
    .RRESP(s_axi_fir_io_RRESP),
    .BVALID(s_axi_fir_io_BVALID),
    .BREADY(s_axi_fir_io_BREADY),
    .BRESP(s_axi_fir_io_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .Y(tmp1_reg_118),
    .Y_ap_vld(Y_ap_vld),
    .x(x)
);

apply_mul_mul_18nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 34 ))
apply_mul_mul_18nbkb_U1(
    .din0(mul_fu_271_p0),
    .din1(hist_load_reg_296),
    .dout(mul_fu_271_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_131 <= i_1_reg_286;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_131 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_154_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_142 <= 6'd38;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_142 <= j_1_reg_325;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp1_reg_118 <= tmp_fu_243_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp1_reg_118 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        hist_load_reg_296 <= hist_q0;
        tmp_10_reg_301 <= tmp_10_fu_177_p1[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_286 <= i_1_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        j_1_reg_325 <= j_1_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_reg_307 <= mul_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_10_reg_301 == 1'd1))) begin
        tmp_8_reg_312 <= tmp_8_fu_188_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_read_reg_278 <= x;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_9_fu_249_p2 == 1'd1))) begin
        Y_ap_vld = 1'b1;
    end else begin
        Y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_9_fu_249_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_9_fu_249_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        hist_address0 = tmp_1_fu_266_p1;
    end else if (((1'b1 == ap_CS_fsm_state6) & (tmp_9_fu_249_p2 == 1'd1))) begin
        hist_address0 = 6'd0;
    end else if (((tmp_9_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        hist_address0 = tmp_s_fu_261_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hist_address0 = tmp_3_fu_172_p1;
    end else begin
        hist_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state6) & (tmp_9_fu_249_p2 == 1'd1)) | ((tmp_9_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        hist_ce0 = 1'b1;
    end else begin
        hist_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        hist_d0 = hist_q0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (tmp_9_fu_249_p2 == 1'd1))) begin
        hist_d0 = x_read_reg_278;
    end else begin
        hist_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state6) & (tmp_9_fu_249_p2 == 1'd1)))) begin
        hist_we0 = 1'b1;
    end else begin
        hist_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_154_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_9_fu_249_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_fu_154_p2 = ((i_reg_131 == 6'd41) ? 1'b1 : 1'b0);

assign i_1_fu_160_p2 = (i_reg_131 + 6'd1);

assign j_1_fu_255_p2 = ($signed(j_reg_142) + $signed(6'd63));

assign mul_fu_271_p0 = 34'd102301;

assign neg_mul_fu_191_p2 = (33'd0 - tmp_8_reg_312);

assign neg_ti_fu_230_p2 = (16'd0 - tmp_7_fu_223_p3);

assign tmp_10_fu_177_p1 = hist_q0;

assign tmp_11_fu_196_p4 = {{neg_mul_fu_191_p2[32:22]}};

assign tmp_12_fu_210_p4 = {{mul_reg_307[33:22]}};

assign tmp_1_fu_266_p1 = j_reg_142;

assign tmp_2_fu_166_p2 = ($signed(6'd40) - $signed(i_reg_131));

assign tmp_3_fu_172_p1 = tmp_2_fu_166_p2;

assign tmp_4_fu_236_p3 = ((tmp_10_reg_301[0:0] === 1'b1) ? neg_ti_fu_230_p2 : tmp_6_fu_219_p1);

assign tmp_5_fu_206_p1 = $signed(tmp_11_fu_196_p4);

assign tmp_6_fu_219_p1 = $signed(tmp_12_fu_210_p4);

assign tmp_7_fu_223_p3 = ((tmp_10_reg_301[0:0] === 1'b1) ? tmp_5_fu_206_p1 : tmp_6_fu_219_p1);

assign tmp_8_fu_188_p1 = mul_fu_271_p2[32:0];

assign tmp_9_fu_249_p2 = ((j_reg_142 == 6'd0) ? 1'b1 : 1'b0);

assign tmp_fu_243_p2 = (tmp1_reg_118 + tmp_4_fu_236_p3);

assign tmp_s_fu_261_p1 = j_1_fu_255_p2;

endmodule //apply
