
#include "VolumeControl.h"
#include <stdint.h>
#include <stddef.h>
#include <bits/stl_algobase.h>

#define VOLUME_STEP 2
#define VOLUME_UP 2
#define VOLUME_DOWN -2

VolumeIO::VolumeIO(ThreadPriority priority, string name, VolumeControl * volume_control) :
	AbstractOS::Thread(priority, name),
	control(volume_control),
{
	XGpio_Initialize(&switches, XPAR_AXI_GPIO_0_DEVICE_ID);
	XGpio_Initialize(&buttons, XPAR_AXI_GPIO_1_DEVICE_ID);
}

void VolumeIO::VolumeUp(void)
{
	// TODO: Add blocking listening
	control->StepVolume(VOLUME_UP);
}

void VolumeIO::VolumeDown(void)
{
	// TODO: Add blocking listening
	control->StepVolume(VOLUME_DOWN);
}

void VolumeIO::run()
{
	while(1)
	{
		if(XGpio_DiscreteRead(&buttons, 1) == 0x2)
			VolumeUp();
		if(XGpio_DiscreteRead(&buttons, 1) == 0x1)
			VolumeDown();
		SetFilter();
		vTaskDelay( pdMS_TO_TICKS( 50 ) );
	}
}

void VolumeIO::SetFilter(void)
{
	static char old_state = 0;
	unsigned char state = static_cast<unsigned char>(XGpio_DiscreteRead(&switches, 2));

	if(state != old_state)
	{
		FilterType type;
		switch(state)
		{
		case 1:
			type = FilterType::HighPass;
			break;
		case 2:
			type = FilterType::LowPass;
			break;
		case 0:
		default:
			type = FilterType::None;
			break;
		}
		old_state = state;
		control->SetFilter(Filter::CreateFilter(type));
	}
}

VolumeControl::VolumeControl(OutputQueue * queue) :
		volume(100),
		mtx(),
		filter(Filter::CreateFilter(FilterType::None))
{
}

AudioSample VolumeControl::ApplyFilter(AudioSample sample)
{
	return filter->Apply(sample);
}

AudioSample VolumeControl::ApplyVolume(AudioSample sample)
{
	//mtx.Acquire();
	AudioSample s = (sample * volume) / 100;
	//mtx.Release();
	return s;
}

void VolumeControl::StepVolume(signed int step)
{
	//mtx.Acquire();
	volume = std::max(std::min(volume + step, (signed int)100), (signed int)0);
	output_queue->EnqueueVolumeCommand((short) volume);
	//mtx.Release();
}

void VolumeControl::SetFilter(Filter * new_filter)
{
	delete filter;
	filter = new_filter;
}
