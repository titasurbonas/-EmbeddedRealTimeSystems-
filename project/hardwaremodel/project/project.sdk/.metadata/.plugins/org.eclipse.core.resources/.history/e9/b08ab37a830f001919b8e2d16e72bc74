#include "Top.h"

Top::Top() :
	audio_driver(),
	audio_preprocessor(),
	audio_input(audio_driver, audio_preprocessor),
	audio_output(audio_driver),
	leds(),
	discofier(leds),
	volume_interface()
{

}

SC_CTOR(Top) :
	clock("clock", 10, SC_NS),
	discofier_clock("discofier_clock", 2600, SC_NS),
#ifdef _DEBUG
	testbench("TestBench"),
#endif
	audio_input("AudioInput"),
	audio_output("AudioOutput"),
	volume_interface("VolumeIO"),
	audio_preprocessor("Preprocessing"),
	discofier("Discofier"),
	leds("LEDS")
{
#ifdef _DEBUG
	testbench.clock(clock);
	testbench.filter_selector(filter_selector);
	testbench.volume_up(volume_up);
	testbench.volume_down(volume_down);
	testbench.audio_output(audio_output_channel);
#else
	// TODO: Include actual hardware implementations here.
#endif
	audio_preprocessor.r_input(right_input_preprocessor);
    audio_preprocessor.l_input(left_input_preprocessor);
	audio_preprocessor.filter_selector(filter_selector);

	audio_input.audio_in_right(right_input_preprocessor);
    audio_input.audio_in_left(left_input_preprocessor);
	audio_input.clock(clock);

	volume_interface.volume_down(volume_down);
	volume_interface.volume_up(volume_up);

	audio_output.output(audio_output_channel);
	audio_output.clock(clock);
//TODO include sincornization
	discofier.CLK(discofier_clock);
	discofier.SDA(discofier_channel);

	leds.SCL(discofier_clock);
	leds.SDA(discofier_channel);

#ifdef _DEBUG
	tf = sc_create_vcd_trace_file("WaveForm");
	tf->set_time_unit(1, SC_NS);
	sc_trace(tf, clock, "clock");
	sc_trace(tf, right_input_preprocessor, "right_input");
    sc_trace(tf, left_input_preprocessor, "left_input");
	sc_trace(tf, audio_output_channel, "audio_output");
	sc_trace(tf, discofier_channel, "disco_channel");
	sc_trace(tf, volume_up, "volume_up");
	sc_trace(tf, volume_down, "volume_down");
#endif

	std::cout << "Finished setting up top" << std::endl;
